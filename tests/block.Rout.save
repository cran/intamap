
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(intamap)
Loading required package: sp
Loading required package: gstat
Loading required package: spacetime
Loading required package: zoo

Attaching package: 'zoo'

The following object(s) are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: xts
Loading required package: akima
Loading required package: automap
Loading required package: mvtnorm
Loading required package: MASS
Loading required package: evd
Loading required package: lattice

Attaching package: 'lattice'

The following object(s) are masked from 'package:evd':

    qq

> 
> # observations = Something from Java...
> # Until then we use the Meuse data:
> data(meuse)
> observations = data.frame(x = meuse$x,y = meuse$y,value = log(meuse$zinc))
> # If you send a field just with 3 columns (x,y & z), we can let R figure
> # out itself which names they have, for creation of a spatial object:
> obsNames = names(observations)
> coordinates(observations) = as.formula(paste("~",obsNames[1], "+", obsNames[2]))
> set.seed(13531)
> predictionLocations = spsample(observations, 50, "regular")
> gridded(predictionLocations) = TRUE
> cellsize = predictionLocations@grid@cellsize
> cs = predictionLocations@grid@cellsize[1]/2
> 
> # We dont know the projection of the data at this stage, assume it is
> # somehow metric
> 
> Srl = list()
> for (i in 1:dim(coordinates(predictionLocations))[1]) {
+   pt1 = coordinates(predictionLocations)[i,]
+   x1 = pt1[1]-cs
+   x2 = pt1[1]+cs
+   y1 = pt1[2]-cs
+   y2 = pt1[2]+cs
+ 
+   boun = data.frame(x=c(x1,x2,x2,x1,x1),y=c(y1,y1,y2,y2,y1))
+   coordinates(boun) = ~x+y
+   boun = Polygon(boun)
+   Srl[[i]] = Polygons(list(boun),ID = as.character(i))
+ }
> predictionLocations = SpatialPolygons(Srl)
> 
> 
> krigingObject = createIntamapObject(
+ 	observations = observations,
+ 	predictionLocations = predictionLocations,
+ #	targetCRS = "+init=epsg:3035",
+ #	boundCRS = "+proj=laea +lat_0=48 +lon_0=9 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m",
+ #	boundCRS = boundCRS,
+ #	boundaries = boundaries,
+   formulaString = as.formula(paste(obsNames[3],"~1")),
+ 	params =  list(thresh = quantile(observations$value,0.9),block=cellsize),
+     outputWhat = list(mean=TRUE, variance=TRUE, excprob = 5.9, cumdistr = 5.9, 
+ 		quantile = .1),
+     blockWhat = list(fat=7,fatVar=7,blockMax=TRUE,blockMaxVar = TRUE,blockMin=TRUE),
+ 	class="automap"
+ )
> 
> checkSetup(krigingObject)
Checking object ... OK
> krigingObject = preProcess(krigingObject)
> krigingObject = estimateParameters(krigingObject)
> krigingObject = blockPredict(krigingObject)
[using ordinary kriging]
[1] "performed ordinary block kriging"
> krigingObject = postProcess(krigingObject)
Loading required package: rgdal
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.9.1, released 2012/05/15
Path to GDAL shared files: C:/Program Files/R/R-2.15.1/library/rgdal/gdal
Loaded PROJ.4 runtime: Rel. 4.7.1, 23 September 2009, [PJ_VERSION: 470]
Path to PROJ.4 shared files: C:/Program Files/R/R-2.15.1/library/rgdal/proj
> predictions = krigingObject$predictions
> 
> # Send predictions back to Java. Not sure how to deal with this spatial object though...?
> summary(krigingObject$outputTable)
       x                y               mean          variance       
 Min.   :179019   Min.   :330013   Min.   :4.913   Min.   :0.005564  
 1st Qu.:179485   1st Qu.:330829   1st Qu.:5.481   1st Qu.:0.020855  
 Median :180183   Median :331644   Median :5.799   Median :0.134431  
 Mean   :180183   Mean   :331644   Mean   :5.964   Mean   :0.206540  
 3rd Qu.:180882   3rd Qu.:332459   3rd Qu.:6.425   3rd Qu.:0.388670  
 Max.   :181348   Max.   :333275   Max.   :7.189   Max.   :0.523013  
   excprob5.9       cumdistr5.9      quantile0.1         fat7       
 Min.   :0.00000   Min.   :0.0000   Min.   :4.577   Min.   :0.0000  
 1st Qu.:0.04287   1st Qu.:0.1562   1st Qu.:5.016   1st Qu.:0.0117  
 Median :0.38354   Median :0.6165   Median :5.419   Median :0.1067  
 Mean   :0.48239   Mean   :0.5176   Mean   :5.468   Mean   :0.1486  
 3rd Qu.:0.84382   3rd Qu.:0.9571   3rd Qu.:5.854   3rd Qu.:0.2098  
 Max.   :1.00000   Max.   :1.0000   Max.   :6.907   Max.   :0.6902  
    fatVar7             blockMax      blockMaxVar         blockMin    
 Min.   :0.0000000   Min.   :6.094   Min.   :0.04212   Min.   :3.944  
 1st Qu.:0.0005133   1st Qu.:6.764   1st Qu.:0.08599   1st Qu.:4.464  
 Median :0.0158717   Median :7.105   Median :0.22521   Median :4.768  
 Mean   :0.0264858   Mean   :7.222   Mean   :0.25696   Mean   :4.824  
 3rd Qu.:0.0481948   3rd Qu.:7.595   3rd Qu.:0.40690   3rd Qu.:5.094  
 Max.   :0.0945648   Max.   :8.351   Max.   :0.68391   Max.   :5.946  
> 
> proc.time()
   user  system elapsed 
  11.37    0.18   11.56 
