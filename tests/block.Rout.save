
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(intamap)
Loading required package: sp
Loading required package: gstat
Loading required package: akima
Loading required package: automap
Loading required package: mvtnorm
Loading required package: MASS
Loading required package: evd
Loading required package: lattice

Attaching package: 'lattice'

The following object(s) are masked from 'package:evd':

    qq

> 
> # observations = Something from Java...
> # Until then we use the Meuse data:
> data(meuse)
> observations = data.frame(x = meuse$x,y = meuse$y,value = log(meuse$zinc))
> # If you send a field just with 3 columns (x,y & z), we can let R figure
> # out itself which names they have, for creation of a spatial object:
> obsNames = names(observations)
> coordinates(observations) = as.formula(paste("~",obsNames[1], "+", obsNames[2]))
> set.seed(13531)
> predictionLocations = spsample(observations, 10, "regular")
> gridded(predictionLocations) = TRUE
> cellsize = predictionLocations@grid@cellsize
> cs = predictionLocations@grid@cellsize[1]/2
> 
> # We dont know the projection of the data at this stage, assume it is
> # somehow metric
> 
> Srl = list()
> for (i in 1:dim(coordinates(predictionLocations))[1]) {
+   pt1 = coordinates(predictionLocations)[i,]
+   x1 = pt1[1]-cs
+   x2 = pt1[1]+cs
+   y1 = pt1[2]-cs
+   y2 = pt1[2]+cs
+ 
+   boun = data.frame(x=c(x1,x2,x2,x1,x1),y=c(y1,y1,y2,y2,y1))
+   coordinates(boun) = ~x+y
+   boun = Polygon(boun)
+   Srl[[i]] = Polygons(list(boun),ID = as.character(i))
+ }
> predictionLocations = SpatialPolygons(Srl)
> 
> 
> krigingObject = createIntamapObject(
+ 	observations = observations,
+ 	predictionLocations = predictionLocations,
+ #	targetCRS = "+init=epsg:3035",
+ #	boundCRS = "+proj=laea +lat_0=48 +lon_0=9 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m",
+ #	boundCRS = boundCRS,
+ #	boundaries = boundaries,
+   formulaString = as.formula(paste(obsNames[3],"~1")),
+ 	params =  list(thresh = quantile(observations$value,0.9),block=cellsize),
+     outputWhat = list(mean=TRUE, variance=TRUE, excprob = 5.9, cumdistr = 5.9, 
+ 		quantile = .1),
+     blockWhat = list(fat=7,fatVar=7,blockMax=TRUE,blockMaxVar = TRUE,blockMin=TRUE),
+ 	class="automap"
+ )
> 
> checkSetup(krigingObject)
Checking object ... OK
> krigingObject = preProcess(krigingObject)
> krigingObject = estimateParameters(krigingObject)
> krigingObject = blockPredict(krigingObject)
[using ordinary kriging]
[1] "performed ordinary block kriging"
Warning message:
In if (blockWhat == "none") blockWhat = list(mean = TRUE) else blockWhat$mean = TRUE :
  the condition has length > 1 and only the first element will be used
> krigingObject = postProcess(krigingObject)
Loading required package: rgdal
rgdal: version: 0.8.1, (SVN revision 415)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.8.1, released 2011/07/09
Path to GDAL shared files: /usr/share/gdal
GDAL does not use iconv for recoding strings.
Loaded PROJ.4 runtime: Rel. 4.7.1, 23 September 2009, [PJ_VERSION: 470]
Path to PROJ.4 shared files: (autodetected)
> predictions = krigingObject$predictions
> 
> # Send predictions back to Java. Not sure how to deal with this spatial object though...?
> summary(krigingObject$outputTable)
       x                y               mean          variance       
 Min.   :179530   Min.   :330383   Min.   :5.116   Min.   :0.008892  
 1st Qu.:179530   1st Qu.:331165   1st Qu.:5.847   1st Qu.:0.012112  
 Median :180051   Median :331946   Median :6.039   Median :0.063021  
 Mean   :180051   Mean   :331946   Mean   :6.037   Mean   :0.103621  
 3rd Qu.:180572   3rd Qu.:332728   3rd Qu.:6.354   3rd Qu.:0.166748  
 Max.   :180572   Max.   :333509   Max.   :6.725   Max.   :0.335321  
   excprob5.9         cumdistr5.9       quantile0.1         fat7         
 Min.   :0.0002662   Min.   :0.02232   Min.   :4.783   Min.   :0.009495  
 1st Qu.:0.4570313   1st Qu.:0.04086   1st Qu.:5.513   1st Qu.:0.077046  
 Median :0.6906330   Median :0.30937   Median :5.729   Median :0.161162  
 Mean   :0.6120414   Mean   :0.38796   Mean   :5.683   Mean   :0.167689  
 3rd Qu.:0.9591400   3rd Qu.:0.54297   3rd Qu.:5.994   3rd Qu.:0.246338  
 Max.   :0.9776840   Max.   :0.99973   Max.   :6.199   Max.   :0.361818  
    fatVar7             blockMax      blockMaxVar         blockMin    
 Min.   :0.0002863   Min.   :6.759   Min.   :0.08183   Min.   :3.984  
 1st Qu.:0.0031038   1st Qu.:7.456   1st Qu.:0.11867   1st Qu.:4.378  
 Median :0.0046041   Median :7.804   Median :0.17128   Median :4.459  
 Mean   :0.0142470   Mean   :7.698   Mean   :0.19312   Mean   :4.505  
 3rd Qu.:0.0295423   3rd Qu.:8.132   3rd Qu.:0.22888   3rd Qu.:4.696  
 Max.   :0.0408475   Max.   :8.288   Max.   :0.41463   Max.   :4.924  
> 
> proc.time()
   user  system elapsed 
  5.651   0.068   5.734 
