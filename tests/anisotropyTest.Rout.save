
R version 2.15.3 (2013-03-01) -- "Security Blanket"
Copyright (C) 2013 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(intamap)
Loading required package: sp
Loading required package: gstat
Loading required package: akima
Loading required package: automap
Loading required package: mvtnorm
Loading required package: MASS
Loading required package: evd
Loading required package: lattice

Attaching package: 'lattice'

The following object(s) are masked from 'package:evd':

    qq

> set.seed(13531)
> 
> plotFigs = FALSE
> library(gstat)
> npts = 1000
> pts=SpatialPoints(cbind(runif(npts),runif(npts)))
> d = SpatialPointsDataFrame(cbind(0,0),data.frame(z=1))
> observations = krige(z~1,d,pts,vgm(1, "Sph", .5,anis=c(90,0.5)),nsim=1,nmax=50,beta=0)
[using conditional Gaussian simulation]
> 
> #spplot(sim)
> 
> predictionLocations = spsample(observations, 1000, "regular")
> 
> # We dont know the projection of the data at this stage, assume it is
> # somehow metric
> 
> 
> 
> formulaString = as.formula(sim1~1)
> krigingObject = createIntamapObject(
+ 	observations = observations,
+ 	predictionLocations = predictionLocations,
+   formulaString = formulaString
+ )
> class(krigingObject) = c("automap")
> 
> checkSetup(krigingObject)
Checking object ... OK
> object = preProcess(krigingObject)
> objTemp=estimateAnisotropy(object)
> #rotate Data
> objTemp$observations=intamap:::rotateAnisotropicData(objTemp$observations,objTemp$anisPar)
> #Estimate Variogram Model
> vario = autofitVariogram(objTemp$formulaString,objTemp$observations,model="Sph")$var_model
> objTemp$anisPar
$ratio
[1] 1.103966

$direction
[1] 14.76637

$Q
          Q11      Q22      Q12
[1,] 59.35887 70.49785 -3.15527

$doRotation
[1] FALSE

> if (plotFigs) {
+   spplot(object$observations,"sim1",col.regions=bpy.colors())
+   spplot(objTemp$observations,"sim1",col.regions=bpy.colors())
+   plot(variogram(sim1~1,object$observations,alpha=c(0,90)),vario)
+ }
> vario
  model       psill     range
1   Nug 0.008903683 0.0000000
2   Sph 0.696729241 0.3273737
> 
> 
> vmod = vgm(1,"Sph",1,anis=c(90,0.5))
> krigingObject$observations = krige(z~1,d,pts,vmod,nsim=1,nmax=50,beta=0)
[using conditional Gaussian simulation]
> object = preProcess(krigingObject)
> objTemp=estimateAnisotropy(object)
> objTemp$anisPar
$ratio
[1] 1.397072

$direction
[1] 22.65507

$Q
          Q11      Q22       Q12
[1,] 28.80359 45.69829 -8.539302

$doRotation
[1] TRUE

> objTemp$observations=intamap:::rotateAnisotropicData(objTemp$observations,objTemp$anisPar)
> vario = autofitVariogram(objTemp$formulaString,objTemp$observations,model="Sph")$var_model
> vario
  model     psill     range
1   Nug 0.0169838 0.0000000
2   Sph 0.6795736 0.6811798
> vmod
  model psill range ang1 anis1
1   Sph     1     1   90   0.5
> 
> vmod = vgm(1,"Sph",2,anis=c(45,0.2))
> krigingObject$observations = krige(z~1,d,pts,vmod,nsim=1,nmax=50,beta=0)
[using conditional Gaussian simulation]
> object = preProcess(krigingObject)
> objTemp=estimateAnisotropy(object)
> objTemp$anisPar
$ratio
[1] 3.278629

$direction
[1] 45.85117

$Q
         Q11      Q22       Q12
[1,] 75.8277 72.17929 -61.37942

$doRotation
[1] TRUE

> objTemp$observations=intamap:::rotateAnisotropicData(objTemp$observations,objTemp$anisPar)
> vario = autofitVariogram(objTemp$formulaString,objTemp$observations,model="Sph")$var_model
> vario
  model    psill    range
1   Nug 0.000000 0.000000
2   Sph 1.061243 1.185154
> vmod
  model psill range ang1 anis1
1   Sph     1     2   45   0.2
> 
> 
> vmod = vgm(1,"Sph",1,anis=c(135,0.5))
> krigingObject$observations = krige(z~1,d,pts,vmod,nsim=1,nmax=50,beta=0)
[using conditional Gaussian simulation]
> object = preProcess(krigingObject)
> objTemp=estimateAnisotropy(object)
> objTemp$anisPar
$ratio
[1] 1.435064

$direction
[1] -41.43083

$Q
          Q11      Q22      Q12
[1,] 35.25282 38.42313 12.65735

$doRotation
[1] TRUE

> objTemp$observations=intamap:::rotateAnisotropicData(objTemp$observations,objTemp$anisPar)
> vario = autofitVariogram(objTemp$formulaString,objTemp$observations,model="Sph")$var_model
> vario
  model      psill     range
1   Nug 0.01006969 0.0000000
2   Sph 0.66272866 0.6889407
> vmod
  model psill range ang1 anis1
1   Sph     1     1  135   0.5
> 
> 
> 
> vmod = vgm(1,"Sph",.3,anis=c(90,0.5))
> krigingObject$observations = krige(z~1,d,pts,vmod,nsim=1,nmax=100,beta=0)
[using conditional Gaussian simulation]
> object = preProcess(krigingObject)
> objTemp=estimateAnisotropy(object)
> objTemp$anisPar
$ratio
[1] 1.148376

$direction
[1] -8.791909

$Q
          Q11      Q22      Q12
[1,] 90.43159 117.7082 4.322087

$doRotation
[1] TRUE

> objTemp$observations=intamap:::rotateAnisotropicData(objTemp$observations,objTemp$anisPar)
> vario = autofitVariogram(objTemp$formulaString,objTemp$observations,model="Sph")$var_model
> vario
  model      psill     range
1   Nug 0.01965908 0.0000000
2   Sph 0.99814016 0.2799867
> vmod
  model psill range ang1 anis1
1   Sph     1   0.3   90   0.5
> if (plotFigs) {
+   p1 = plot(variogram(sim1~1,object$observations,alpha=c(0,90)),vmod,ylim = c(0,1.2),xlim=c(0,0.6),main="orig,orig")
+   p2 = plot(variogram(sim1~1,object$observations,alpha=c(0,90)),vario,ylim = c(0,1.2),xlim=c(0,0.6),main="orig,fitted")
+   p3 = plot(variogram(sim1~1,objTemp$observations,alpha=c(0,90)),vmod,ylim = c(0,1.2),xlim=c(0,0.6),main="rot,orig")
+   p4 = plot(variogram(sim1~1,objTemp$observations,alpha=c(0,90)),vario,ylim = c(0,1.2),xlim=c(0,0.6),main = "rot,fitted")
+ 
+   print(p1,position = c(0,0.5,0.5,1),more = TRUE)
+   print(p2,position = c(0.5,0.5,1,1),more = TRUE)
+   print(p3,position = c(0,0,0.5,0.5),more = TRUE)
+   print(p4,position = c(0.5,0,1,0.5))
+ 
+   plot(variogram(sim1~1,objTemp$observations,alpha=c(seq(0,150,30))),vmod,ylim = c(0,1.2),xlim=c(0,0.6),main="rot,orig")
+ 
+   spplot(object$observations,"sim1",col.regions=bpy.colors())
+   spplot(objTemp$observations,"sim1",col.regions=bpy.colors())
+ }
> 
> 
> 
> 
> data(sic2004)
> coordinates(sic.val)=~x+y
> sic.val$value=sic.val$dayx
> x = sic.test$x
> y = sic.test$y
> 
> coordinates(sic.test)=~x+y
> 
> stest = sic.test[(x > -10000 & x < 140000 & y > 100000 & y < 240000),]
>  
> obj<-createIntamapObject(formulaString = "joker~1",
+    observations=sic.val,
+    predictionLocations = stest,
+    params = list(doAnisotropy = TRUE),
+    class = "automap" )
> obj = preProcess(obj)
> obj = estimateParameters(obj)
> obj$anisPar
$ratio
[1] 1.350924

$direction
[1] 25.93149

$Q
              Q11         Q22           Q12
[1,] 9.948346e-06 1.43261e-05 -2.787868e-06

$doRotation
[1] TRUE

> obj = spatialPredict(obj)
> obj = postProcess(obj)
Loading required package: rgdal
rgdal: version: 0.8-5, (SVN revision 449)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.9.2, released 2012/10/08
Path to GDAL shared files: C:/Program Files/R/R-2.15.3/library/rgdal/gdal
GDAL does not use iconv for recoding strings.
Loaded PROJ.4 runtime: Rel. 4.7.1, 23 September 2009, [PJ_VERSION: 470]
Path to PROJ.4 shared files: C:/Program Files/R/R-2.15.3/library/rgdal/proj
> summary(as.data.frame(obj$outputTable))
       x                y               mean          variance    
 Min.   : -8351   Min.   :103106   Min.   :117.8   Min.   : 3959  
 1st Qu.: 20626   1st Qu.:136147   1st Qu.:141.8   1st Qu.:18002  
 Median : 63885   Median :167801   Median :150.9   Median :19548  
 Mean   : 59128   Mean   :170171   Mean   :178.5   Mean   :18418  
 3rd Qu.: 94458   3rd Qu.:210897   3rd Qu.:155.2   3rd Qu.:20373  
 Max.   :131632   Max.   :239246   Max.   :574.8   Max.   :20488  
> 
> proc.time()
   user  system elapsed 
  10.28    0.21   10.49 
