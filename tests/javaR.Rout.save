
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(intamap)
Loading required package: sp
Loading required package: gstat
Loading required package: akima
Loading required package: automap
Loading required package: mvtnorm
Loading required package: MASS
Loading required package: evd
Loading required package: lattice

Attaching package: 'lattice'

The following object(s) are masked from 'package:evd':

    qq

> 
> # observations = Something from Java...
> # Until then we use the Meuse data:
> data(meuse)
> observations = data.frame(x = meuse$x,y = meuse$y,value = log(meuse$zinc))
> # If you send a field just with 3 columns (x,y & z), we can let R figure
> # out itself which names they have, for creation of a spatial object:
> obsNames = names(observations)
> coordinates(observations) = as.formula(paste("~",obsNames[1], "+", obsNames[2]))
> set.seed(13531)
> predictionLocations = spsample(observations, 50, "regular")
> proj4string(observations) <- CRS("+proj=stere +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel +units=m")
> proj4string(predictionLocations) <- CRS("+proj=stere +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel +units=m")
> 
> # We dont know the projection of the data at this stage, assume it is
> # somehow metric
> 
> krigingObject = createIntamapObject(
+ 	observations = observations,
+ 	predictionLocations = predictionLocations,
+   targetCRS = "+init=epsg:3035",
+ #	boundCRS = "+proj=laea +lat_0=48 +lon_0=9 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m",
+ #	boundCRS = boundCRS,
+ #	boundaries = boundaries,
+   formulaString = as.formula(paste(obsNames[3],"~1")),
+ 	params =  list(confProj = TRUE, thresh = quantile(observations$value,0.9)),
+   outputWhat = list(mean=TRUE, variance=TRUE, excprob = 5.9, cumdistr = 5.9, 
+ 		quantile = .1), class = "automap"
+ 
+ )
Loading required package: rgdal
rgdal: version: 0.8.1, (SVN revision 415)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.8.1, released 2011/07/09
Path to GDAL shared files: /usr/share/gdal
GDAL does not use iconv for recoding strings.
Loaded PROJ.4 runtime: Rel. 4.7.1, 23 September 2009, [PJ_VERSION: 470]
Path to PROJ.4 shared files: (autodetected)
> 
> checkSetup(krigingObject)
Checking object ... OK
> krigingObject = preProcess(krigingObject)
> krigingObject = estimateParameters(krigingObject)
> krigingObject = spatialPredict(krigingObject)
> krigingObject = postProcess(krigingObject)
> 
> summary(krigingObject$outputTable)
       x                 y                mean          variance      
 Min.   :4021158   Min.   :3102915   Min.   :4.805   Min.   :0.09789  
 1st Qu.:4021733   1st Qu.:3103766   1st Qu.:5.485   1st Qu.:0.14345  
 Median :4022423   Median :3104617   Median :5.675   Median :0.33215  
 Mean   :4022423   Mean   :3104617   Mean   :5.965   Mean   :0.39523  
 3rd Qu.:4023113   3rd Qu.:3105468   3rd Qu.:6.456   3rd Qu.:0.64199  
 Max.   :4023688   Max.   :3106318   Max.   :7.497   Max.   :0.78320  
   excprob5.9        cumdistr5.9         quantile0.1   
 Min.   :0.002019   Min.   :0.0001118   Min.   :4.317  
 1st Qu.:0.136987   1st Qu.:0.2135848   1st Qu.:4.641  
 Median :0.384356   Median :0.6156440   Median :5.095  
 Mean   :0.487683   Mean   :0.5123174   Mean   :5.205  
 3rd Qu.:0.786415   3rd Qu.:0.8630135   3rd Qu.:5.711  
 Max.   :0.999888   Max.   :0.9979810   Max.   :6.943  
> 
> 
> proc.time()
   user  system elapsed 
  2.823   0.072   2.899 
